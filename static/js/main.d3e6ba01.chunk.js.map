{"version":3,"sources":["components/Table.js","components/DisplayRacersButton.js","components/AddUsersButton.js","components/PlaceBetsButton.js","components/RaceButton.js","components/AddUsersModal.js","components/PlaceBetsModal.js","components/RaceModal.js","App.js","globalStyles.js","index.js"],"names":["Table","sentData","racersReady","setRacersReady","useState","setRacers","useEffect","className","elements","Object","entries","map","key","value","push","name","odds","printHorse","DisplayRacersButton","handleRacers","racerCount","data","setData","horsesLoaded","setHorsesLoaded","horses","setHorses","competitors","raceSize","console","log","ueg","pop_size","keys","length","indices","i","index","Math","floor","random","includes","selectCompetitors","onClick","fetch","headers","then","response","json","myJson","AddUsersButton","PlaceBetsButton","RaceButton","ModalWrapper","styled","div","ModalContent","CloseModalButton","MdClose","AddUsersModal","showModal","setShowModal","addUser","setName","funds","setFunds","modalRef","useRef","keyPress","useCallback","e","document","addEventListener","removeEventListener","handleClose","ref","current","target","htmlFor","placeholder","onInput","PlaceBetsModal","bettors","racers","saveBet","bettor","setBettor","horse","setHorse","position","setPosition","amount","setAmount","errorMessage","setErrorMessage","onChange","insertRacers","insertPlaces","label","parseInt","NaN","username","fundSearch","RaceModal","bets","searchRacers","query","racer","split","x","weight","convertToWeights","race_order","order","names","weights","j","splice","weightedRandom","user","user_amount","user_horse","user_place","payout","runRace","Container","App","showAddUsersModal","setAddUsersModal","showPlaceBetsModal","setPlaceBetsModal","showRaceModal","setRaceModal","setBets","JSON","parse","localStorage","getItem","setBettors","setItem","stringify","local_bettors","handleLocalStorage","changeAmount","handleFunds","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3e6ba01.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\n\nconst Table = ({ sentData, racersReady, setRacersReady }) => {\n  const [racers, setRacers] = useState({})\n  const [selected, setSelected] = useState([])\n  \n  useEffect(() => {\n    setRacers(sentData)\n  }, [sentData]);\n\n  const printHorse = () => {\n    var elements = []\n\n    if (racersReady) {\n      {Object.entries(sentData).map(([key, value]) => {\n        elements.push(<tr key={key}><td>{value.name}</td><td>{value.odds}</td></tr>)\n      })}\n    }\n    \n    return (elements)\n  }\n\n  // const keyPress = useCallback(e => {\n  //   if (e.key === 'Escape' && racersReady) {\n  //     console.log(\"Horses can be loaded again\")\n  //     setRacersReady(false)\n  //   }\n  // }, [setRacersReady, racersReady])\n\n  // useEffect(() => {\n  //   document.addEventListener('keydown', keyPress)\n  // }, [keyPress])\n  \n  return (\n    <>\n      <table className='horse-table'>\n        <thead>\n          <tr className='table-header'>\n            <th>Name</th>\n            <th>Odds</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* {selectCompetitors(5)} */}\n          {printHorse()}\n        </tbody>\n      </table>\n    </>\n\n  )\n}\n\nexport default Table\n","import { useState, useEffect } from 'react'\nimport { update } from 'react-spring'\nimport Table from './Table'\n\nconst DisplayRacersButton = ({ handleRacers, racerCount }) => {\n  const [data, setData] = useState([])\n  const [horsesLoaded, setHorsesLoaded] = useState(false)\n  const [racersReady, setRacersReady] = useState(false)\n  const [horses, setHorses] = useState({})\n  // const [racerCount, setRacerCount] = useState(5)\n\n  const getData = () => {\n    if (!horsesLoaded) {\n      fetch('horses.json'\n        , {\n          headers : {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        })\n          .then(function(response) {\n            return response.json();\n          })\n          .then(function(myJson) {\n            setData(myJson);\n            setHorsesLoaded(true);\n            console.log(\"horses loaded\")\n      })\n    } else {\n      console.log('horses already loaded')\n    }\n  }\n\n  const selectCompetitors = (raceSize) => {\n    console.log(\"selecting competitors\")\n\n    let ueg = {};\n    let pop_size = Object.keys(data).length;\n    let indices = []\n\n    for (let i = 0; i < raceSize; i++) {\n      let index = Math.floor(Math.random() * pop_size)\n      if (indices.includes(index)) {\n        continue\n      } else {\n        ueg[i] = data[index]\n        indices.push(index)\n      }\n    }\n\n    setRacersReady(true)\n    return ueg\n  }\n\n  useEffect(() => {\n    if (horsesLoaded) {\n      let competitors = selectCompetitors(racerCount)\n      setHorses(competitors)\n      handleRacers(competitors)\n      // ONLYFOR TESTING PURPOSES!!!!!\n      // Effects:\n      //    Commented   -> The table will only load once\n      //    Uncommented -> The table will load indefinitely\n      setHorsesLoaded(false)\n    }\n  }, [horsesLoaded])\n\n  return (\n    <>\n      <Table sentData={horses} racersReady={racersReady} setRacersReady={setRacersReady} />\n      <button className=\"showRacersButton\" onClick={getData}>Show Racers!</button>\n    </>\n  )\n}\n\nexport default DisplayRacersButton\n","\nconst AddUsersButton = ({ onClick }) => {\n  return (\n  <>\n    <button className=\"addUsersButton\" onClick={onClick}>Add Users</button>\n  </>\n  )\n}\n\nexport default AddUsersButton\n","const PlaceBetsButton = ({ onClick }) => {\n  return (\n  <>\n    <button className=\"placeBetsButton\" onClick={onClick}>Place Bets</button>\n  </>\n  )\n}\n\nexport default PlaceBetsButton\n","const RaceButton = ({ onClick }) => {\n  return (\n  <>\n    <button className=\"raceButton\" onClick={onClick}>Race!</button>\n  </>\n  )\n}\n\nexport default RaceButton\n","import { useState, useEffect, useRef, useCallback  } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\n\nconst ModalWrapper = styled.div`\n    width: 400px;\n    height: 300px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n    background: #fff;\n    color: #000;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n`\n\nconst ModalContent = styled.div`\n    display: inline-block;\n    padding: 50px;\n    margin: center;\n    width: 100%;\n\n    line-height: 1.8;\n    color: #141414;\n\n    label {\n        display: inline-block;\n        margin-right: 10px;\n    }\n\n    input {\n        margin: 10px;\n    }\n\n    button {\n        display: inline-block;\n    }\n`\n\nconst CloseModalButton = styled(MdClose)`\n    cursor: pointer;\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    width: 32px;\n    height: 32px;\n    padding: 0;\n    z-index: 10;\n`\n\nconst AddUsersModal = ({ showModal, setShowModal, addUser }) => {\n    const [name, setName] = useState('')\n    const [funds, setFunds] = useState(0)\n    const modalRef = useRef();\n\n    const closeModal = (e) => {\n        if (modalRef.current === e.target) {\n            setShowModal(false)\n        }\n    }\n\n    const keyPress = useCallback(e => {\n        if(e.key === 'Escape' && showModal) {\n            setShowModal(false)\n        }\n    }, [setShowModal, showModal])\n\n    useEffect(() => {\n        document.addEventListener('keydown', keyPress)\n        return () => document.removeEventListener('keydown', keyPress)\n    }, [keyPress])\n\n    const handleName = (e) => {\n        setName(e.target.value)\n    }\n\n    const handleFunds = (e) => {\n        setFunds(e.target.value)\n    }\n\n    const handleClose = () => {\n        setName('')\n        setFunds(0)\n        setShowModal(!showModal)\n    }\n\n    const saveUser = () => {\n        addUser(name, funds)\n    }\n\n    return (\n        <>\n        {showModal ? (\n                <div className='modal-background' ref={modalRef} onClick={closeModal}>\n                    <ModalWrapper>\n                        <ModalContent>\n                            <label htmlFor='add-user-name'>User Name</label>\n                            <input\n                                className='add-user-name'\n                                placeholder=\"User Name\" \n                                onInput={handleName} />\n\n                            <label htmlFor='add-user-amount'>Starting Funds</label>\n                            <input\n                                className='add-user-amount'\n                                placeholder=\"0\"\n                                onInput={handleFunds} />\n\n                            <button className=\"saveBet\" onClick={saveUser}>OK</button>\n                            <button className=\"cancel\" onClick={handleClose}>Cancel</button>\n                        </ModalContent>\n                        <CloseModalButton aria-label='Close Modal'\n                            onClick={handleClose} />\n                    </ModalWrapper>\n                </div>\n        ) : null}\n        </>\n    )\n}\n\nexport default AddUsersModal","import { useState, useRef, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\n\nconst CloseModalButton = styled(MdClose)`\n    cursor: pointer;\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    width: 32px;\n    height: 32px;\n    padding: 0;\n    z-index: 10;\n`\n\nconst ModalWrapper = styled.div`\n    width: 400px;\n    height: 350px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n    background: #fff;\n    color: #000;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n`\n\nconst ModalContent = styled.div`\n    display: inline-block;\n    padding: 50px;\n    margin: center;\n    width: 100%;\n\n    line-height: 1.8;\n    color: #141414;\n\n    label {\n        display: inline-block;\n        margin-right: 10px;\n    }\n\n    input {\n        margin: 10px;\n    }\n\n    button {\n        display: inline-block;\n    }\n`\n\nconst PlaceBetsModal = ({ showModal, setShowModal, bettors, racers, racerCount, saveBet }) => {\n    const modalRef = useRef();\n    const [bettor, setBettor] = useState('')\n    const [horse, setHorse] = useState('')\n    const [position, setPosition] = useState('')\n    const [amount, setAmount] = useState(0)\n\n    // States for handling missing data\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const horseSelection = (e) => {\n        setHorse(e.target.value)\n    }\n\n    const positionSelection = (e) => {\n        setPosition(e.target.value)\n    }\n\n    const userSelection = (e) => {\n        setBettor(e.target.value)\n    }\n\n    const betAmount = (e) => {\n        setAmount(parseInt(e.target.value))\n    }\n\n    const closeModal = (e) => {\n        if (modalRef.current === e.target) {\n            setShowModal(false)\n        }\n    }\n\n    const keyPress = useCallback(e => {\n        if(e.key === 'Escape' && showModal) {\n            setShowModal(false)\n        }\n    }, [setShowModal, showModal])\n\n    useEffect(() => {\n        document.addEventListener('keydown', keyPress)\n        return () => document.removeEventListener('keydown', keyPress)\n    }, [keyPress])\n\n    const insertRacers = () => {\n        let elements = []\n        Object.entries(racers).map(([key, value]) => {\n            elements.push(<option key={value.name} value={value.name}>{value.name}</option>)\n        })    // Functions to handle missing data\n        return (elements)\n    }\n\n    const insertPlaces = () => {\n        let elements = [\n            <option key='1'>1st</option>,\n            <option key='2'>2nd</option>,\n            <option key='3'>3rd</option>,\n        ]\n\n        for (let i = 4; i <= racerCount; i++) {\n            elements.push(<option key={i}>{i}th</option>)\n        }\n\n        return (elements)\n    }\n\n    // Must be a better way to do this. Fix later.\n    const fundSearch = (username) => {\n        for (let i = 0; i < bettors.length; i++) {\n            if (bettors[i].name === username) {\n                return bettors[i].funds\n            }\n        }\n    }\n\n    const handleBet = () => {\n        if (horse === '') {\n            setErrorMessage(\"No horse has been selected!\")\n        } else if (bettor === '') {\n            setErrorMessage(\"No bettor has been selected!\")\n        } else  if (position === '') {\n            setErrorMessage(\"No position has been selected!\")\n        } else if (amount === 0) {\n            setErrorMessage(\"Empty amount for the bet!\")\n        } else if (typeof amount === NaN) {\n            console.log(typeof amount)\n            setErrorMessage(\"Need to have a number for the bet!\")\n        } else if (amount <= 0) {\n            setErrorMessage(\"Bet needs to be a positive integer!\")\n        } else if (amount > fundSearch(bettor)) {\n            setErrorMessage(\"Bettor does not have necessary funds\")\n        } else {\n            saveBet(bettor, horse, position, amount)\n            handleClose()\n        }\n    }\n\n    const handleClose = () => {\n        setBettor('')\n        setHorse('')\n        setPosition('')\n        setAmount(0)\n        setShowModal(!showModal)\n    }\n\n    return (\n        <>\n        {showModal ? (\n                <div className='modal-background' ref={modalRef} onClick={closeModal}>\n                    <ModalWrapper>\n                        <ModalContent>\n                            {errorMessage && (\n                                <p className='error'>{errorMessage}</p>\n                            )}\n                            <label htmlFor='horse-selection'>Horse:</label>\n                            <select onChange={horseSelection} className='horse-selection'>\n                                <option key='initial-horse' value=\"Select a Horse\"> -- Select a Horse -- </option>\n                                {insertRacers()}\n                            </select><br />\n\n                            <label htmlFor='finish-position'>Position</label>\n                            <select onChange={positionSelection} className='finish-position'>\n                                <option key='initial-position' value=\"Select a position\"> -- Select a Position -- </option>\n                                {insertPlaces()}  \n                            </select><br />\n\n                            <label htmlFor='user-selection'>Bettor:</label>\n                            <select onChange={userSelection} className='user-selection'>\n                                <option key='initial-user' value=\"Select a Bettor\"> -- Select a Bettor -- </option>\n                                {bettors.map((bettor) => <option key={bettor.label} value={bettor.value}>{bettor.name}</option>)}\n                            </select><br />\n\n                            <label htmlFor='bet-amount'>Bet Amount:</label>\n                            <input className='bet-amount' placeholder='0' onChange={betAmount}/><br />\n\n                            <button className=\"saveBet\" onClick={handleBet}>OK</button>\n                            <button className=\"cancel\" onClick={handleClose}>Cancel</button>\n                        </ModalContent>\n                        <CloseModalButton aria-label='Close Modal' onClick={handleClose} />\n                    </ModalWrapper>\n                </div>\n        ) : null}\n        </>\n    )\n}\n\nexport default PlaceBetsModal","import { useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\n\nconst ModalWrapper = styled.div`\n    width: 400px;\n    height: 300px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n    background: #fff;\n    color: #000;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    position: relative;\n    z-index: 10;\n    border-radius: 10px;\n`\n\nconst ModalContent = styled.div`\n    display: inline-block;\n    padding: 50px;\n    margin: center;\n    width: 100%;\n\n    line-height: 1.8;\n    color: #141414;\n\n    label {\n        display: inline-block;\n        margin-right: 10px;\n    }\n\n    input {\n        margin: 10px;\n    }\n\n    button {\n        display: inline-block;\n    }\n`\n\nconst CloseModalButton = styled(MdClose)`\n    cursor: pointer;\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    width: 32px;\n    height: 32px;\n    padding: 0;\n    z-index: 10;\n`\n\nconst RaceModal = ({ showModal, setShowModal, bettors, bets, racers }) => {\n    const modalRef = useRef();\n\n    const closeModal = (e) => {\n        if (modalRef.current === e.target) {\n            setShowModal(false)\n        }\n    }\n\n    const searchRacers = (query) => {\n        for (const racer in racers) {\n            if (racers[racer].name === query) {\n                console.log(\"Hello from searchRacers()\")\n                console.log(racers[racer])\n                return racers[racer];\n            }\n        }\n    }\n\n    const convertToWeights = (racers) => {\n        console.log(\"Hello from convertToWeights()\")\n        Object.entries(racers).map((key, value) => {\n            let odds = racers[value].odds.split`/`.map(x => +x)\n            let weight = odds[1] / (odds[0] + odds[1])\n            racers[value].weight = weight\n        })\n    }\n\n    const weightedRandom = (racers) => {\n        console.log(\"Hello from weightedRandom()\")\n        let order = []\n\n        let names = []\n        let weights = []\n\n        Object.entries(racers).map((key, value) => {\n            names.push(racers[value].name)\n            weights.push(racers[value].weight)\n        })\n\n        let length = names.length\n        for (let j = 0; j < length; j++) {\n            let i;\n\n            for (i = 0; i < weights.length; i++) {\n                weights[i] += weights[i - 1] || 0\n            }\n\n            let random = Math.random() * weights[weights.length - 1]\n\n            for (i = 0; i < weights.length; i++) {\n                if (weights[i] > random) {\n                    break\n                }\n            }\n\n            order.push(names[i])\n            names.splice(i, 1)\n            weights.splice(i, 1)\n        }\n        return order\n    }\n\n    const runRace = () => {\n        convertToWeights(racers)\n        let race_order = weightedRandom(racers)\n        console.log(\"Bettors are\")\n        console.log(bettors)\n        for (const user in bets) {\n            let user_amount = bets[user].amount\n            let user_horse = bets[user].horse\n            let user_place = parseInt(bets[user].position[0])\n\n            console.log(user_amount)\n            console.log(user_horse)\n            console.log(user_place)\n            if (race_order[user_place-1] === user_horse) {\n                let racer = searchRacers(user_horse)\n                let payout = parseInt(racer.odds.split('/')[0] * user_amount)\n                bettors[user].funds += payout\n            }\n        }\n        console.log(\"Race conclusion\")\n        console.log(race_order)\n        console.log(bettors)\n    }\n\n    return (\n        <>\n            { showModal ? (\n                <div className='modal-background' ref={modalRef} onClick={closeModal}>\n                    <ModalWrapper>\n                        <ModalContent>\n                            {/* {convertToWeights(racers)} */}\n                            {runRace()}\n                            <button className=\"okButton\" onClick={() => setShowModal(!showModal)}>OK</button>\n                        </ModalContent>\n                    </ModalWrapper>\n                </div>\n            ) : null }\n        </>\n    )\n}\n\nexport default RaceModal","import { useState, useEffect } from 'react'\nimport React from 'react'\n\nimport styled from 'styled-components'\n\nimport DisplayRacersButton from './components/DisplayRacersButton'\nimport AddUsersButton from './components/AddUsersButton'\nimport PlaceBetsButton from './components/PlaceBetsButton'\nimport RaceButton from './components/RaceButton'\n\nimport AddUsersModal from './components/AddUsersModal'\nimport PlaceBetsModal from './components/PlaceBetsModal'\nimport RaceModal from './components/RaceModal'\n\nconst Container = styled.div`\n  display: flex;\n`\n\nfunction App() {\n  const [ready, setReady] = useState(false);\n  const [showAddUsersModal, setAddUsersModal] = useState(false)\n  const [showPlaceBetsModal, setPlaceBetsModal] = useState(false)\n  const [showRaceModal, setRaceModal] = useState(false)\n\n  const [racers, setRacers] = useState([])\n  const [racerCount, setRacerCount] = useState(5)\n\n  const [bets, setBets] = useState([])\n\n  // TEMPORARY DUMMY DATA\n  // const [bettors, setBettors] = useState([\n  //   {name: \"Marco\", funds: 100},\n  //   {name: \"Micah\", funds: 100}\n  // ])\n\n  const [bettors, setBettors] = useState(JSON.parse(localStorage.getItem('bettors')))\n\n  const handleLocalStorage = () => {\n    let local_bettors = localStorage.getItem('bettors')\n    console.log(\"Hello from handleLocalBettors\")\n    console.log(local_bettors)\n    if (local_bettors !== []) {\n      setBettors(JSON.parse(local_bettors))\n    }\n  }\n\n  const openAddUsersModal = () => {\n    setAddUsersModal(!showAddUsersModal)\n  }\n\n  const openPlaceBetsModal = () => {\n    handleLocalStorage()\n    setPlaceBetsModal(!showPlaceBetsModal)\n  }\n\n  const openRaceModal = () => {\n    setRaceModal(!showRaceModal)\n  }\n\n  const addUser = (name, funds) => {\n    console.log(\"Name is: \" + name)\n    console.log(\"Amount is: \" + funds)\n    setBettors([...bettors, {name: name, funds: parseInt(funds)}])\n  }\n\n  // Handles the list of current competitors from DisplayRacersButton\n  const handleRacers = (horses) => {\n    setRacers(horses)\n  }\n\n\n  const handleFunds = (username, changeAmount) => {\n    for (let i = 0; i < bettors.length; i++) {\n      if (bettors[i].name === username) {\n        bettors[i].funds += changeAmount\n      }\n    }\n  }\n\n  const saveBet = (bettor, horse, position, amount) => {\n    setBets([...bets, {bettor: bettor, horse: horse, position: position, amount:amount}])\n    handleFunds(bettor, -amount)\n  }\n\n  useEffect(() => {}, [bets, racers])\n\n  useEffect(() => {\n    localStorage.setItem('bettors', JSON.stringify(bettors))\n    console.log(bettors)\n  }, [bettors])\n  \n  return (\n    <>\n      <Container>\n        <DisplayRacersButton\n          handleRacers={handleRacers}\n          racerCount={racerCount} />\n      </Container>\n\n      <Container>\n        <AddUsersButton onClick={openAddUsersModal} bettors={bettors} />\n        <AddUsersModal\n          showModal={showAddUsersModal}\n          setShowModal={setAddUsersModal}\n          addUser={addUser} />\n      </Container>\n\n      <Container>\n        <PlaceBetsButton onClick={openPlaceBetsModal} />\n        <PlaceBetsModal \n          showModal={showPlaceBetsModal}\n          setShowModal={setPlaceBetsModal}\n          bettors={bettors}\n          racers={racers}\n          racerCount={racerCount}\n          saveBet={saveBet} />\n      </Container>\n\n      <Container>\n        <RaceButton onClick={openRaceModal} />\n        <RaceModal \n          showModal={showRaceModal}\n          setShowModal={setRaceModal}\n          bettors={bettors}\n          bets={bets}\n          racers={racers} />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Arial', sans-serif;\n\n    button {\n      min-width: 150px;\n      padding: 10px 24px;\n      border-radius: 7px;\n      border: none;\n      background: black;\n      color: #fff;\n      font-size: 20px;\n      cursor: pointer;\n      margin: 5px;\n    }\n\n    background {\n      z-index: auto;\n      display: flex;\n      position: fixed;\n      top: 0;\n      left: 0;\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n    }\n\n    div.modal-background {\n      z-index: auto;\n      display: flex;\n      position: fixed;\n      top: 0;\n      left: 0;\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n    }\n\n    div.modal-wrapper {\n      width: 800px;\n      height: 500px;\n      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n      background: #fff;\n      color: #000;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      position: relative;\n      z-index: 10;\n      border-radius: 10px;\n    }\n\n    div.modal-content {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      line-height: 1.8;\n      color: #141414;\n  \n      p {\n          margin-bottom: 1rem;\n      }\n  \n      button {\n          padding: 10px 24px;\n          background: #141414;\n          color: #fff;\n          border: none;\n      }\n    }\n\n    label {\n      font-family: sans-serif;\n    }\n`\n\nexport default GlobalStyle","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport GlobalStyle from './globalStyles'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}